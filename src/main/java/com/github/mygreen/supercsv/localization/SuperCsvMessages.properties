#######################################################
# Suepr CSV Annotation default validation messages.
#######################################################
# 共通変数
# {lineNumber} - 現在、書き込んだ／読み込んだ行数
# {rowNumber} - CSVの行番号
# {columnNumber} - CSVの列番号
# {label} - CSVの列ラベル
# {validatedValue} = エラーの原因となった値
#######################################################

csvContext=[{rowNumber}行, {columnNumber}列]

csvError={csvContext} : 項目「{label}」は不正な値です
csvError.noMatchColumnSize=[{rowNumber}行] : 列数が不正です。 {expectedSize}列で設定すべきですが、実際には{actualSize}列になっています。
csvError.noMatchHeader=[{rowNumber}行] : ヘッダーの値「{joinedActualHeaders}」は、「{joinedExpectedHeaders}」と一致しません。
csvError.fixedSizeInsufficient={csvContext} : 固定長カラムの項目「{label}」は、定義サイズ（${fixedColumnSize}）に対して、実際のサイズ（${actualSize}）が不足しています。
csvError.fixedSizeOver={csvContext} : 固定長カラムの項目「{label}」は、定義サイズ（${fixedColumnSize}） に対して、実際のサイズ（${actualSize}）が超過しています。
csvError.fixedSizeContainsLineBreak={csvContext} : 固定長カラムの項目「{label}」は、改行コードを含めることはできません。


# CellProcessorのエラーメッセージ
com.github.mygreen.supercsv.cellprocessor.constraint.Require.violated={csvContext} : 項目「{label}」の値は必須です。

com.github.mygreen.supercsv.cellprocessor.constraint.LengthMin.violated={csvContext} : 項目「{label}」の文字列長（{length}）は、{min}文字以上でなければなりません。
com.github.mygreen.supercsv.cellprocessor.constraint.LengthMax.violated={csvContext} : 項目「{label}」の文字列長（{length}）は、{max}文字以内でなければなりません。
com.github.mygreen.supercsv.cellprocessor.constraint.LengthBetween.violated={csvContext} : 項目「{label}」の文字列長（{length}）は、{min}～{max}文字の範囲でなければなりません。
com.github.mygreen.supercsv.cellprocessor.constraint.LengthExact.violated={csvContext} : 項目「{label}」の文字列長（{length}）は、${f:join(requiredLengths, ', ')}文字${size(requiredLengths) == 1 ? '' : 'の何れか'}でなければなりません。

com.github.mygreen.supercsv.cellprocessor.constraint.NumberMin.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${empty(printer) ? min : printer.print(min)}${inclusive ? '以上の値' : 'より大きい値'}でなければなりません。
com.github.mygreen.supercsv.cellprocessor.constraint.NumberMax.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${empty(printer) ? max : printer.print(max)}${inclusive ? '以下の値' : 'より小さい値'}でなければなりません。
com.github.mygreen.supercsv.cellprocessor.constraint.NumberRange.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${empty(printer) ? min : printer.print(min)}～${empty(printer) ? max : printer.print(max)}の範囲でなければなりません。

com.github.mygreen.supercsv.cellprocessor.constraint.DateTimeMin.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${empty(printer) ? min : printer.print(min)}${inclusive ? '以降の値' : 'より後の値'}でなければなりません。
com.github.mygreen.supercsv.cellprocessor.constraint.DateTimeMax.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${empty(printer) ? max : printer.print(max)}${inclusive ? '以前の値' : 'より前の値'}でなければなりません。
com.github.mygreen.supercsv.cellprocessor.constraint.DateTimeRange.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${empty(printer) ? min : printer.print(min)}～${empty(printer) ? max : printer.print(max)} の期間内でなければなりません。

com.github.mygreen.supercsv.cellprocessor.constraint.Equals.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${size(equalsValues) == 1 ? '' : '何れかの' }値「${f:join(equalsValues, ', ', printer)}」と一致する必要があります。
com.github.mygreen.supercsv.cellprocessor.constraint.Unique.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、{duplicatedRowNumber}行目の値と重複しています。
com.github.mygreen.supercsv.cellprocessor.constraint.UniqueHashCode.violated={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、{duplicatedRowNumber}行目の値と重複しています。

com.github.mygreen.supercsv.cellprocessor.constraint.WordForbid.violated={csvContext} : 項目「{label}」の値（{validatedValue}）には、禁止語彙 「${f:join(words, ', ')}」が含まれています。
com.github.mygreen.supercsv.cellprocessor.constraint.WordRequire.violated={csvContext} : 項目「{label}」の値（{validatedValue}）には、必須語彙 「${f:join(words, ', ')}」${size(words) == 1 ? '' : 'の何れか' }が含まれていません。
com.github.mygreen.supercsv.cellprocessor.constraint.Pattern.violated={csvContext} : 項目「{label}」の値（{validatedValue}）は、${empty(description) ? '正規表現「' + regex + '」' : description}に一致しません。

com.github.mygreen.supercsv.cellprocessor.format.ParseProcessor.violated={csvContext} : 項目「{label}」の値（{validatedValue}）の書式は不正です。
com.github.mygreen.supercsv.cellprocessor.format.PrintProcessor.violated={csvContext} : 項目「{label}」の値の書き込みに失敗しました。

# アノテーションのエラーメッセージ（CellProcessorのメッセージに置換する）
com.github.mygreen.supercsv.annotation.constraint.CsvRequire.message={com.github.mygreen.supercsv.cellprocessor.constraint.Require.violated}

com.github.mygreen.supercsv.annotation.constraint.CsvLengthMin.message={com.github.mygreen.supercsv.cellprocessor.constraint.LengthMin.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvLengthMax.message={com.github.mygreen.supercsv.cellprocessor.constraint.LengthMax.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvLengthBetween.message={com.github.mygreen.supercsv.cellprocessor.constraint.LengthBetween.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvLengthExact.message={com.github.mygreen.supercsv.cellprocessor.constraint.LengthExact.violated}

com.github.mygreen.supercsv.annotation.constraint.CsvNumberMin.message={com.github.mygreen.supercsv.cellprocessor.constraint.NumberMin.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvNumberMax.message={com.github.mygreen.supercsv.cellprocessor.constraint.NumberMax.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvNumberRange.message={com.github.mygreen.supercsv.cellprocessor.constraint.NumberRange.violated}

com.github.mygreen.supercsv.annotation.constraint.CsvDateTimeMin.message={com.github.mygreen.supercsv.cellprocessor.constraint.DateTimeMin.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvDateTimeMax.message={com.github.mygreen.supercsv.cellprocessor.constraint.DateTimeMax.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvDateTimeRange.message={com.github.mygreen.supercsv.cellprocessor.constraint.DateTimeRange.violated}

com.github.mygreen.supercsv.annotation.constraint.CsvEquals.message={com.github.mygreen.supercsv.cellprocessor.constraint.Equals.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvUnique.message={com.github.mygreen.supercsv.cellprocessor.constraint.Unique.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvUniqueHashCode.message={com.github.mygreen.supercsv.cellprocessor.constraint.UniqueHashCode.violated}

com.github.mygreen.supercsv.annotation.constraint.CsvWordForbid.message={com.github.mygreen.supercsv.cellprocessor.constraint.WordForbid.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvWordRequire.message={com.github.mygreen.supercsv.cellprocessor.constraint.WordRequire.violated}
com.github.mygreen.supercsv.annotation.constraint.CsvPattern.message={com.github.mygreen.supercsv.cellprocessor.constraint.Pattern.violated}

com.github.mygreen.supercsv.annotation.format.CsvBooleanFormat.message={csvContext} : 項目「{label}」の値（{validatedValue}）は、trueの値「${f:join(trueValues, ', ')}」、またはfalseの値「${f:join(falseValues, ', ')}」の何れかの値で設定してください。
com.github.mygreen.supercsv.annotation.format.CsvEnumFormat.message={csvContext} : 項目「{label}」の値（{validatedValue}）は、何れかの値「${f:join(enums, ', ')}」である必要があります。
com.github.mygreen.supercsv.annotation.format.CsvNumberFormat.message={csvContext} : 項目「{label}」の値（{validatedValue}）は、数値の書式${empty(pattern) ? '' : '「' + pattern + '」'}として不正です。
com.github.mygreen.supercsv.annotation.format.CsvDateTimeFormat.message={csvContext} : 項目「{label}」の値（{validatedValue}）は、日時の書式「{pattern}」として不正です。

## JSR-303/310((BeanValidation 1.0/1.1)のエラーメッセージ
javax.validation.constraints.AssertFalse.message=falseを設定してください。
javax.validation.constraints.AssertTrue.message=trueを設定してください。
javax.validation.constraints.DecimalMax.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、{value}${inclusive == true ? '以下の' : 'より小さい'}値を設定してください。
javax.validation.constraints.DecimalMin.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、{value}${inclusive == true ? '以上の' : 'より大きい'}値を設定してください。
javax.validation.constraints.Digits.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、整数{integer}桁以内、小数{fraction}桁以内で設定してください。
javax.validation.constraints.Future.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、未来の日付を設定してください。
javax.validation.constraints.Max.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、{value}より同じか小さい値を設定してください。 
javax.validation.constraints.Min.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、{value}より同じか大きい値を設定してください。
javax.validation.constraints.NotNull.message={csvContext} : 項目「{label}」の値は必須です。
javax.validation.constraints.Null.message={csvContext} : 項目「{label}」の値は未設定でなければいけません。
javax.validation.constraints.Past.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、過去の日付を設定してください。
javax.validation.constraints.Pattern.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、正規表現「{regexp}」に一致していません。
javax.validation.constraints.Size.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）のサイズは、{min}から{max}の間の値を設定してください。

## JSR-380(BeanValidation 2.0)のメッセージ
javax.validation.constraints.NotEmpty.message={csvContext} : 項目「{label}」の値は必須です。
javax.validation.constraints.NotBlank.message={csvContext} : 項目「{label}」の値は必須です。
javax.validation.constraints.FutureOrPresent.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、現在以降の未来の日付を設定してください。
javax.validation.constraints.PastOrPresent.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、現在以前の過去の日付を設定してください。
javax.validation.constraints.Negative.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、0より小さい値を設定してください。
javax.validation.constraints.NegativeOrZero.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、0以下の値を設定してください。
javax.validation.constraints.Positive.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、0より大きい値を設定してください。
javax.validation.constraints.PositiveOrZero.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、0以上の値を設定してください。
javax.validation.constraints.Email.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、E-mail形式で設定してください。

## Jakarta Bean Validation 3.0のメッセージ
jakarta.validation.constraints.AssertFalse.message={javax.validation.constraints.AssertFalse.message}
jakarta.validation.constraints.AssertTrue.message={javax.validation.constraints.AssertTrue.message}
jakarta.validation.constraints.DecimalMax.message={javax.validation.constraints.DecimalMax.message}
jakarta.validation.constraints.DecimalMin.message={javax.validation.constraints.DecimalMin.message}
jakarta.validation.constraints.Digits.message={javax.validation.constraints.Digits.message}
jakarta.validation.constraints.Email.message={javax.validation.constraints.Email.message}
jakarta.validation.constraints.Future.message={javax.validation.constraints.Future.message}
jakarta.validation.constraints.FutureOrPresent.message={javax.validation.constraints.FutureOrPresent.message}
jakarta.validation.constraints.Max.message={javax.validation.constraints.Max.message}
jakarta.validation.constraints.Min.message={javax.validation.constraints.Min.message}
jakarta.validation.constraints.Negative.message={javax.validation.constraints.Negative.message}
jakarta.validation.constraints.NegativeOrZero.message={javax.validation.constraints.NegativeOrZero.message}
jakarta.validation.constraints.NotBlank.message={javax.validation.constraints.NotBlank.message}
jakarta.validation.constraints.NotEmpty.message={javax.validation.constraints.NotEmpty.message}
jakarta.validation.constraints.NotNull.message={javax.validation.constraints.NotNull.message}
jakarta.validation.constraints.Null.message={javax.validation.constraints.Null.message}
jakarta.validation.constraints.Past.message={javax.validation.constraints.Past.message}
jakarta.validation.constraints.PastOrPresent.message={javax.validation.constraints.PastOrPresent.message}
jakarta.validation.constraints.Pattern.message={javax.validation.constraints.Pattern.message}
jakarta.validation.constraints.Positive.message={javax.validation.constraints.Positive.message}
jakarta.validation.constraints.PositiveOrZero.message={javax.validation.constraints.PositiveOrZero.message}
jakarta.validation.constraints.Size.message={javax.validation.constraints.Size.message}

## Hibernate Validatorのエラーメッセージ
org.hibernate.validator.constraints.CreditCardNumber.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、不正なクレジットカードの番号です。
org.hibernate.validator.constraints.EAN.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、不正な{type}のコードです。
org.hibernate.validator.constraints.ISBN.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、不正な ISBN です。
org.hibernate.validator.constraints.Email.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、E-mail形式で設定してください。
org.hibernate.validator.constraints.Length.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、文字の長さは{min}から{max}の間で設定してください。
org.hibernate.validator.constraints.CodePointLength.message={csvContext} : 項目「{label}」の文字長'${validatedValue.length()}'は、{min}～{max}の間で設定してください。
org.hibernate.validator.constraints.LuhnCheck.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、Luhn Module 10 チェックサムの値が不正です。
org.hibernate.validator.constraints.Mod10Check.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、Module 10 チェックサムの値が不正です。
org.hibernate.validator.constraints.Mod11Check.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、Luhn Module 11 チェックサムの値が不正です。
org.hibernate.validator.constraints.ModCheck.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${modType} チェックサムの値が不正です。
org.hibernate.validator.constraints.NotBlank.message={csvContext} : 項目「{label}」の値は必須です。
org.hibernate.validator.constraints.NotEmpty.message={csvContext} : 項目「{label}」の値は必須です。
org.hibernate.validator.constraints.ParametersScriptAssert.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、スクリプトの式"{script}"がtrueを返しませんでした。
org.hibernate.validator.constraints.Range.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、{min}から{max}の間の値を設定してください。
org.hibernate.validator.constraints.SafeHtml.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、スクリプトを含んでいる安全でない可能性があります。
org.hibernate.validator.constraints.ScriptAssert.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、スクリプトの式"{script}"がtrueを返しませんでした。
org.hibernate.validator.constraints.URL.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、不正なURLの形式です。

org.hibernate.validator.constraints.br.CNPJ.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、法人税金支払番号（CNPJ）として不正な書式です。
org.hibernate.validator.constraints.br.CPF.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、個人税金支払い番号（CPF）として不正な書式です。
org.hibernate.validator.constraints.br.TituloEleitor.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、IDカードとして不正な書式です。

org.hibernate.validator.constraints.Currency.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、通貨({value})として不正です。

org.hibernate.validator.constraints.pl.REGON.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、ポーランド納税者身分証番号(REGON)として不正な書式です。
org.hibernate.validator.constraints.pl.NIP.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、VAT身分証番号(NIP)として不正な書式です。
org.hibernate.validator.constraints.pl.PESEL.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、 ポーランド国際身分証番号(PESEL)として不正な書式です。

# Hibernate Validator 6.0のエラーメッセージ
org.hibernate.validator.constraints.time.DurationMax.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${days == 0 ? '' : days == 1 ? ' 1 day' : days += '日'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += '時'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' 分'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' 秒'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' ミリ秒'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' ナノ秒'} ${inclusive == true ? ' 以前' : 'より前'}を設定してください。
org.hibernate.validator.constraints.time.DurationMin.message={csvContext} : 項目「{label}」の値（${empty(printer) ? validatedValue : printer.print(validatedValue)}）は、${days == 0 ? '' : days == 1 ? ' 1 day' : days += '日'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += '時'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' 分'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' 秒'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' ミリ秒'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' ナノ秒'} ${inclusive == true ? ' 以降' : 'より後'}を設定してください。



